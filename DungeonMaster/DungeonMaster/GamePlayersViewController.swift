//
//  GamePlayersViewController.swift
//  DungeonMaster
//
//  Created by Scott James Remnant on 1/21/16.
//  Copyright Â© 2016 Scott James Remnant. All rights reserved.
//

import CoreData
import UIKit

class GamePlayersViewController: UITableViewController, NSFetchedResultsControllerDelegate {
    
    var game: Game!

    override func viewDidLoad() {
        super.viewDidLoad()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    override func setEditing(editing: Bool, animated: Bool) {
        // Clear the cache of missing players.
        missingPlayers = nil
        
        let oldEditing = self.editing, tableViewLoaded = self.tableViewLoaded
        super.setEditing(editing, animated: animated)
        
        if editing != oldEditing && tableViewLoaded {
            let addSection = fetchedResultsController.sections?.count ?? 0
            if editing {
                tableView.insertSections(NSIndexSet(index: addSection), withRowAnimation: .Automatic)
            } else {
                tableView.deleteSections(NSIndexSet(index: addSection), withRowAnimation: .Automatic)
            }
        }
        
        if oldEditing && !editing {
            // Players added directly to the Game should also be added to the parent adventure, so that they're added to the next adventure.
            // We don't do the inverse, because "removing a player from the adventure" just means they won't take part anymore. We leave their old game records.
            game.adventure.addPlayers(fromGame: game)
            
            game.adventure.lastModified = NSDate()
            try! managedObjectContext.save()
        }
    }
    
    // MARK: Navigation
    
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if segue.identifier == "PlayerSegue" {
            if let indexPath = tableView.indexPathForSelectedRow {
                let playedGame = fetchedResultsController.objectAtIndexPath(indexPath) as! PlayedGame
                
                let viewController = segue.destinationViewController as! PlayerRootViewController
                viewController.playedGame = playedGame
            }
            
        } else if segue.identifier == "AddPlayerSegue" {
            let player = Player(inManagedObjectContext: managedObjectContext)
            
            let viewController = (segue.destinationViewController as! UINavigationController).topViewController as! PlayerViewController
            viewController.player = player
            
            viewController.completionBlock = { cancelled, player in
                if let player = player where !cancelled {
                    let _ = PlayedGame(game: self.game, player: player, inManagedObjectContext: managedObjectContext)

                    self.game.adventure.lastModified = NSDate()
                    try! managedObjectContext.save()
                }
                
                self.dismissViewControllerAnimated(true, completion: nil)
                if let indexPath = self.tableView.indexPathForSelectedRow {
                    self.tableView.deselectRowAtIndexPath(indexPath, animated: true)
                }
            }
            
        } else if segue.identifier == "AddLogEntrySegue" {
            let viewController = segue.destinationViewController as! AddLogEntryViewController
            viewController.game = game

        }
    }

    // MARK: Fetched results controller
    
    lazy var fetchedResultsController: NSFetchedResultsController = { [unowned self] in
        let fetchRequest = NSFetchRequest(entity: Model.PlayedGame)
        fetchRequest.predicate = NSPredicate(format: "game == %@", self.game)
        
        let nameSortDescriptor = NSSortDescriptor(key: "player.name", ascending: true)
        fetchRequest.sortDescriptors = [nameSortDescriptor]
        
        let fetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: managedObjectContext, sectionNameKeyPath: nil, cacheName: nil)
        fetchedResultsController.delegate = self
        
        try! fetchedResultsController.performFetch()
        
        return fetchedResultsController
    }()
    
    /// The set of Players that are not participating in this game.
    ///
    /// This is generated by using the standard results controller, and has to be reset whenever that changes.
    var missingPlayers: [Player]! {
        get {
            if let missingPlayers = _missingPlayers {
                return missingPlayers
            }
            
            // Ideally we'd use something like "NONE adventures == %@" here, but that doesn't work.
            let fetchRequest = NSFetchRequest(entity: Model.Player)
            let players = fetchedResultsController.fetchedObjects!.map({ ($0 as! PlayedGame).player })
            fetchRequest.predicate = NSPredicate(format: "NOT SELF IN %@", players)
            
            let nameSortDescriptor = NSSortDescriptor(key: "name", ascending: true)
            fetchRequest.sortDescriptors = [nameSortDescriptor]
            
            _missingPlayers = try! managedObjectContext.executeFetchRequest(fetchRequest) as! [Player]
            return _missingPlayers!
        }
        
        set(newMissingPlayers) {
            _missingPlayers = newMissingPlayers
        }
    }
    private var _missingPlayers: [Player]?
    
    // MARK: UITableViewDataSource
    
    var tableViewLoaded = false
    
    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        tableViewLoaded = true
        return (fetchedResultsController.sections?.count ?? 0) + (editing ? 1 : 0)
    }
    
    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let addSection = fetchedResultsController.sections?.count ?? 0
        if section < addSection {
            let sectionInfo = fetchedResultsController.sections![section]
            return sectionInfo.numberOfObjects
        } else {
            return missingPlayers.count + 1
        }
    }
    
    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let addSection = fetchedResultsController.sections?.count ?? 0
        if indexPath.section < addSection {
            // Player in the adventure, referenced through a PlayedGame object.
            let cell = tableView.dequeueReusableCellWithIdentifier("GamePlayerCell", forIndexPath: indexPath) as! GamePlayerCell
            let playedGame = fetchedResultsController.objectAtIndexPath(indexPath) as! PlayedGame
            cell.player = playedGame.player
            return cell
        } else if indexPath.row < missingPlayers.count {
            // Player not yet in the adventure, as a Player directly.
            let cell = tableView.dequeueReusableCellWithIdentifier("GamePlayerCell", forIndexPath: indexPath) as! GamePlayerCell
            let player = missingPlayers[indexPath.row]
            cell.player = player
            return cell
        } else {
            // Cell to create a new player.
            let cell = tableView.dequeueReusableCellWithIdentifier("GameAddPlayerCell", forIndexPath: indexPath)
            return cell
        }
    }
    
    // MARK: Edit support
    
    override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {
        return true
    }
    
    override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {
        if editingStyle == .Delete {
            let playedGame = fetchedResultsController.objectAtIndexPath(indexPath) as! PlayedGame
            managedObjectContext.deleteObject(playedGame)
            
            game.adventure.lastModified = NSDate()
            try! managedObjectContext.save()
            
        } else if editingStyle == .Insert {
            if indexPath.row < missingPlayers.count {
                let player = missingPlayers[indexPath.row]
                let _ = PlayedGame(game: game, player: player, inManagedObjectContext: managedObjectContext)
                
                game.adventure.lastModified = NSDate()
                try! managedObjectContext.save()
            } else {
                performSegueWithIdentifier("AddPlayerSegue", sender: self)
            }
        }
    }
    
    // MARK: UITableViewDelegate
    
    override func tableView(tableView: UITableView, willSelectRowAtIndexPath indexPath: NSIndexPath) -> NSIndexPath? {
        let addSection = fetchedResultsController.sections?.count ?? 0
        if indexPath.section < addSection {
            return editing ? nil : indexPath
        } else if indexPath.row < missingPlayers.count {
            return nil
        } else {
            return indexPath
        }
    }
    
    override func tableView(tableView: UITableView, editingStyleForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCellEditingStyle {
        let addSection = fetchedResultsController.sections?.count ?? 0
        if indexPath.section < addSection {
            return .Delete
        } else if indexPath.row < missingPlayers.count {
            return .Insert
        } else {
            return .Insert
        }
    }
    
    // MARK: NSFetchedResultsControllerDelegate
    
    var oldMissingPlayers: [Player]?
    
    func controllerWillChangeContent(controller: NSFetchedResultsController) {
        // Clear or reset the cache of missing players, keeping the old cache around for insertion checking.
        oldMissingPlayers = editing ? missingPlayers : nil
        missingPlayers = nil
        
        tableView.beginUpdates()
    }
    
    func controller(controller: NSFetchedResultsController, didChangeSection sectionInfo: NSFetchedResultsSectionInfo, atIndex sectionIndex: Int, forChangeType type: NSFetchedResultsChangeType) {
        switch type {
        case .Insert:
            tableView.insertSections(NSIndexSet(index: sectionIndex), withRowAnimation: .Fade)
        case .Delete:
            tableView.deleteSections(NSIndexSet(index: sectionIndex), withRowAnimation: .Fade)
        default:
            return
        }
    }
    
    func controller(controller: NSFetchedResultsController, didChangeObject anObject: AnyObject, atIndexPath indexPath: NSIndexPath?, forChangeType type: NSFetchedResultsChangeType, newIndexPath: NSIndexPath?) {
        switch type {
        case .Insert:
            let playedGame = anObject as! PlayedGame
            if let oldIndex = oldMissingPlayers?.indexOf(playedGame.player) {
                let oldIndexPath = NSIndexPath(forRow: oldIndex, inSection: 1)
                tableView.deleteRowsAtIndexPaths([ oldIndexPath ], withRowAnimation: .Top)
            }
            
            tableView.insertRowsAtIndexPaths([newIndexPath!], withRowAnimation: .Bottom)
        case .Delete:
            // Since we're using an intermediate relationship object in the query, but a relationship target in the cell, we can't just use `anObject` because that has already had its relationshiped nillified. Look up the Player in the cell we're about to remove instead.
            let cell = tableView.cellForRowAtIndexPath(indexPath!) as! GamePlayerCell
            if let newIndex = missingPlayers.indexOf(cell.player) {
                let newIndexPath = NSIndexPath(forRow: newIndex, inSection: 1)
                tableView.insertRowsAtIndexPaths([ newIndexPath ], withRowAnimation: .Top)
            }
            
            tableView.deleteRowsAtIndexPaths([indexPath!], withRowAnimation: .Bottom)
        case .Update:
            if let cell = tableView.cellForRowAtIndexPath(indexPath!) as? GamePlayerCell {
                let playedGame = anObject as! PlayedGame
                cell.player = playedGame.player
            }
        case .Move:
            // .Move implies .Update; update the cell at the old index, and then move it.
            if let cell = tableView.cellForRowAtIndexPath(indexPath!) as? GamePlayerCell {
                let playedGame = anObject as! PlayedGame
                cell.player = playedGame.player
            }
            
            tableView.moveRowAtIndexPath(indexPath!, toIndexPath: newIndexPath!)
        }
    }
    
    func controllerDidChangeContent(controller: NSFetchedResultsController) {
        tableView.endUpdates()
    }

}

// MARK: -

class GamePlayerCell: UITableViewCell {
    
    @IBOutlet var nameLabel: UILabel!
    @IBOutlet var passivePerceptionLabel: UILabel!
    @IBOutlet var raceLabel: UILabel!
    @IBOutlet var classLabel: UILabel!
    @IBOutlet var backgroundLabel: UILabel!
    
    @IBOutlet var ppCaptionLabel: UILabel!

    @IBOutlet var leadingConstraint: NSLayoutConstraint!

    var player: Player! {
        didSet {
            nameLabel.text = player.name
            passivePerceptionLabel.text = "\(player.passivePerception)"
            raceLabel.text = player.race.stringValue
            classLabel.text = "\(player.characterClass.stringValue) \(player.level)"
            backgroundLabel.text = player.background.stringValue
        }
    }
 
    override func setEditing(editing: Bool, animated: Bool) {
        super.setEditing(editing, animated: animated)
        
        selectionStyle = editing ? .None : .Default
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()

        ppCaptionLabel.transform = CGAffineTransformMakeRotation(-CGFloat(Ï / 2.0))
        leadingConstraint.constant = editing ? 0.0 : (separatorInset.left - layoutMargins.left)
    }

}

class GameAddPlayerCell: UITableViewCell {
    
    @IBOutlet var label: UILabel!
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        label.textColor = tintColor
    }

}